<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="issue">
	<resultMap id="issueResult01" type="IssueVO">
		<!-- property는 화면단에서 쓸 이름, column은 데이터컬럼명이랑 동일 -->
		<result property="i_Num" column="i_Num" />
		<result property="c_Id" column="c_Id" />
		<result property="i_Name" column="i_Name" />
		<result property="i_Content" column="i_Content" />
		<result property="i_Date" column="i_Date" />
		<result property="i_Start" column="i_Start" />
		<result property="i_End" column="i_End" />
		<result property="i_Groupnum" column="i_Groupnum" />
		<result property="mem_Id" column="mem_Id" />
	</resultMap>
	
	<resultMap id="issueResult02" type="java.util.HashMap">
		<!-- property는 화면단에서 쓸 이름, column은 데이터컬럼명이랑 동일 -->
		<result property="i_Num" column="i_Num" />
		<result property="c_Id" column="c_Id" />
		<result property="i_Name" column="i_Name" />
		<result property="i_Content" column="i_Content" jdbcType="CLOB" javaType="java.lang.String"/>
		<result property="i_Date" column="i_Date" />
		<result property="i_Start" column="i_Start" />
		<result property="i_End" column="i_End" />
		<result property="i_Groupnum" column="i_Groupnum" />
		<result property="mem_Id" column="mem_Id" />
		<result property="mem_Name" column="mem_Name" />
	</resultMap>
	
		<resultMap id="fileResult01" type="java.util.HashMap">
		<!-- property는 화면단에서 쓸 이름, column은 데이터컬럼명이랑 동일 -->
		<result property="a_RealName" column="a_RealName" />
		<result property="a_File" column="a_File" javaType="[B" jdbcType="BLOB"/>
		<result property="a_NameEx" column="a_NameEx" />
		<result property="i_Num" column="i_Num"/>
		<result property="a_Num" column="a_Num" />
		<result property="a_Size" column="a_Size" />

	</resultMap>

	

	<!-- 글 목록 페이징-->
 		<select id="searchList" resultMap="issueResult02" parameterType="project.euna.issue.vo.Criteria"> 
      <![CDATA[
		select i_Num, c_Id, i_Name, i_Content, i_Date, mem_Id, mem_name
        from (
            select I.i_Num, I.c_Id, I.i_Name, I.i_Content, I.i_Date, I.mem_Id, M.mem_name, row_number() over(order by I.i_Num desc) as rnum
            from issue I, member M
            where I.mem_Id = M.mem_Id
            and I.c_Id=#{c_Id}
            )
        where rnum between #{rowStart} and #{rowEnd}
        order by to_number(i_Num) desc
      ]]>

	</select>
	
	<!-- 게시물 총 갯수 -->
	<select id="listCount" resultType="int" parameterType="project.euna.issue.vo.Criteria"> 
      <![CDATA[
        select count(i_Num)
        from issue
        where i_Num>0
        and c_Id=#{c_Id}
      ]]>

	</select>
	
	<!-- 글쓰기 화면 전환 시 글번호 먼저 가져오기 -->
	<select id="get_i_Num" resultMap="issueResult02"> 
      <![CDATA[
		select issue_i_Num.nextval from dual
      ]]>

	</select>


	<!-- 글 입력 -->
	<insert id="issueInsert" parameterType="IssueVO">
		insert into issue(i_Num, c_Id, i_Name, i_Content, i_Date, i_Groupnum , mem_Id, i_Start, i_End)
		values(#{i_Num}, #{c_Id}, #{i_Name}, #{i_Content} ,  
		(select to_char(sysdate, 'YYYY/MM/DD/ HH24:MI:SS') from dual)
		, #{i_Groupnum} , #{mem_Id}, #{i_Start}, #{i_End})
	</insert>


	<!-- 게시글 조회 -->
	<select id="issueRead"  parameterType="String" resultMap="issueResult02"> 
      <![CDATA[
        select I.i_Num, I.c_Id, I.i_Name, I.i_Content, I.i_Date, I.mem_Id, M.mem_name, I.i_Start, I.i_End
		from issue I, member M
		where I.mem_Id = M.mem_Id
        and I.i_Num=#{i_Num}
      ]]>
	</select>

	<!-- 게시물 삭제 -->
	<delete id="issueDelete" parameterType="String">
		DELETE
		FROM issue
		WHERE i_Num=#{i_Num}
	</delete>

	<!-- 게시물 수정 -->
	<update id="issueUpdate"
		parameterType="project.euna.issue.vo.IssueVO">
		UPDATE issue
		SET i_Name = #{i_Name},
		i_Content = #{i_Content},
		i_Date = (select to_char(sysdate, 'YYYY/MM/DD/ HH24:MI:SS') from dual),
		i_Start = #{i_Start},
		i_End = #{i_End}
		WHERE i_Num=#{i_Num}
	</update>
	

 

</mapper>